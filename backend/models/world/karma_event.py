"""Karma Event Model"""

from datetime import datetime
from typing import Optional, Dict, Any, List
from pydantic import BaseModel, Field
from enum import Enum


class EventStatus(str, Enum):
    """Status of an event"""
    SCHEDULED = "scheduled"
    ACTIVE = "active"
    ENDED = "ended"
    CANCELLED = "cancelled"


class EventEffect(BaseModel):
    """Individual effect within an event"""
    effect_type: str
    value: float
    affected_players: str = "all"
    duration_hours: float
    description: str
    applied_at: Optional[datetime] = None
    expires_at: Optional[datetime] = None


class ParticipationReward(BaseModel):
    """Reward for participating in event"""
    reward_type: str  # "credits", "karma", "item", "xp"
    amount: float
    description: str
    minimum_participation: int = 1  # Minimum actions required


class EventParticipation(BaseModel):
    """Player participation tracking"""
    player_id: str
    username: str
    participation_count: int = 0
    rewards_claimed: bool = False
    first_participated: datetime = Field(default_factory=datetime.utcnow)
    last_participated: datetime = Field(default_factory=datetime.utcnow)


class KarmaEventModel(BaseModel):
    """
    Represents a world event triggered by The Architect
    Stored in MongoDB karma_events collection
    """

    # Event Identity
    event_id: str = Field(..., description="Unique event identifier")
    event_type: str = Field(...,
                            description="Type of event (golden_age, purge, etc.)")
    severity: str = Field(..., description="low, medium, high, critical")

    # Event Details
    name: str = Field(..., description="Display name of event")
    description: str = Field(..., description="Short description")
    lore: str = Field(..., description="Rich narrative description")

    # Effects
    effects: List[EventEffect] = Field(
        default_factory=list, description="List of active effects")

    # Scope
    is_global: bool = Field(
        default=True, description="Affects all players or just specific regions")
    affected_territories: List[int] = Field(
        default_factory=list, description="Territory IDs affected")
    affected_guilds: List[str] = Field(
        default_factory=list, description="Guild IDs affected (if any)")

    # Participation
    requires_participation: bool = Field(
        default=False, description="Players must actively participate")
    participation_mechanics: Optional[str] = Field(
        default=None, description="How players can participate")
    participation_rewards: Optional[List[ParticipationReward]] = Field(
        default=None, description="Participation rewards")
    participants: List[EventParticipation] = Field(
        default_factory=list, description="Player participation data")
    total_participants: int = Field(
        default=0, description="Total unique participants")

    # Timing
    duration_hours: float = Field(..., description="How long event lasts")
    scheduled_start: Optional[datetime] = Field(
        default=None, description="When event is scheduled to start")
    started_at: Optional[datetime] = Field(
        default=None, description="When event actually started")
    ends_at: Optional[datetime] = Field(
        default=None, description="When event will end")
    ended_at: Optional[datetime] = Field(
        default=None, description="When event actually ended")

    # Status
    status: EventStatus = Field(
        default=EventStatus.SCHEDULED, description="Current event status")

    # Trigger Information
    trigger_reason: str = Field(...,
                                description="Why this event was triggered")
    triggered_by: str = Field(
        default="architect", description="architect, admin, system")
    karma_at_trigger: float = Field(
        default=0.0, description="Collective karma when triggered")
    world_state_snapshot: Optional[Dict[str, Any]] = Field(
        default=None, description="World state at trigger time")

    # Impact
    estimated_impact: str = Field(...,
                                  description="low, medium, high, world_changing")
    actual_impact: Optional[str] = Field(
        default=None, description="Actual impact after event")

    # AI Metadata
    architect_reasoning: str = Field(...,
                                     description="The Architect's reasoning")
    alternative_events_considered: List[str] = Field(
        default_factory=list, description="Other events considered")
    ai_generated: bool = Field(
        default=True, description="Generated by AI or template")

    # Statistics
    total_players_affected: int = Field(
        default=0, description="How many players were affected")
    positive_impact_count: int = Field(
        default=0, description="Players who benefited")
    negative_impact_count: int = Field(
        default=0, description="Players who suffered")

    # Metadata
    created_at: datetime = Field(
        default_factory=datetime.utcnow, description="When event was created")
    created_by_ai: str = Field(
        default="architect", description="Which AI created this")
    version: int = Field(default=1, description="Event version for updates")

    class Config:
        json_encoders = {
            datetime: lambda v: v.isoformat() if v else None
        }
