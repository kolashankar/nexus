import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { useState } from 'react';
import { Card, CardContent, CardHeader, CardTitle, CardDescription } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Progress } from '@/components/ui/progress';
import { Alert, AlertDescription } from '@/components/ui/alert';
import { Sparkles, Trophy, Star, AlertTriangle } from 'lucide-react';
export const PrestigePanel = ({ currentPrestige, playerLevel, karmaPoints, achievementsUnlocked, prestigeConfig, onPrestige }) => {
    const [confirmOpen, setConfirmOpen] = useState(false);
    const requirements = prestigeConfig.requirements;
    const meetsLevelReq = playerLevel >= requirements.min_player_level;
    const meetsKarmaReq = Math.abs(karmaPoints) >= requirements.karma_threshold;
    const meetsAchievementReq = achievementsUnlocked >= requirements.achievements_required;
    const canPrestige = meetsLevelReq && meetsKarmaReq && meetsAchievementReq;
    const getRequirementColor = (met) => met ? 'text-green-500' : 'text-red-500';
    return (_jsxs(Card, { className: "w-full max-w-2xl mx-auto", children: [_jsxs(CardHeader, { children: [_jsxs(CardTitle, { className: "flex items-center gap-2", children: [_jsx(Sparkles, { className: "w-6 h-6 text-purple-500" }), "Prestige System"] }), _jsx(CardDescription, { children: "Reset your progress for permanent bonuses and exclusive rewards" })] }), _jsxs(CardContent, { className: "space-y-6", children: [_jsxs("div", { className: "flex items-center justify-between p-4 bg-purple-50 dark:bg-purple-950 rounded-lg", children: [_jsxs("div", { children: [_jsx("p", { className: "text-sm text-gray-600 dark:text-gray-400", children: "Current Prestige" }), _jsx("p", { className: "text-2xl font-bold", children: prestigeConfig.name })] }), _jsxs(Badge, { variant: "outline", className: "text-lg px-4 py-2", children: [_jsx(Trophy, { className: "w-4 h-4 mr-2" }), "Level ", currentPrestige] })] }), _jsxs("div", { children: [_jsx("h3", { className: "font-semibold mb-3", children: "Requirements for Next Prestige" }), _jsxs("div", { className: "space-y-2", children: [_jsxs("div", { className: "flex justify-between items-center p-3 bg-gray-50 dark:bg-gray-900 rounded", children: [_jsx("span", { className: "text-sm", children: "Player Level" }), _jsxs("span", { className: `font-semibold ${getRequirementColor(meetsLevelReq)}`, children: [playerLevel, " / ", requirements.min_player_level] })] }), _jsxs("div", { className: "flex justify-between items-center p-3 bg-gray-50 dark:bg-gray-900 rounded", children: [_jsx("span", { className: "text-sm", children: "Karma Points" }), _jsxs("span", { className: `font-semibold ${getRequirementColor(meetsKarmaReq)}`, children: [Math.abs(karmaPoints), " / ", requirements.karma_threshold] })] }), _jsxs("div", { className: "flex justify-between items-center p-3 bg-gray-50 dark:bg-gray-900 rounded", children: [_jsx("span", { className: "text-sm", children: "Achievements" }), _jsxs("span", { className: `font-semibold ${getRequirementColor(meetsAchievementReq)}`, children: [achievementsUnlocked, " / ", requirements.achievements_required] })] })] })] }), _jsxs("div", { children: [_jsx("h3", { className: "font-semibold mb-3", children: "Permanent Bonuses" }), _jsx("div", { className: "grid grid-cols-2 gap-2", children: Object.entries(prestigeConfig.permanent_bonuses).map(([key, value]) => (_jsxs("div", { className: "p-2 bg-green-50 dark:bg-green-950 rounded text-sm", children: [_jsx(Star, { className: "w-3 h-3 inline mr-1 text-yellow-500" }), _jsxs("span", { className: "font-medium", children: [key.replace(/_/g, ' '), ": +", (value * 100).toFixed(0), "%"] })] }, key))) })] }), _jsxs("div", { children: [_jsx("h3", { className: "font-semibold mb-3", children: "Unlocks" }), _jsx("div", { className: "space-y-1", children: prestigeConfig.unlocks.map((unlock) => (_jsxs("div", { className: "text-sm p-2 bg-blue-50 dark:bg-blue-950 rounded", children: ["\u2022 ", unlock.replace(/_/g, ' ')] }, unlock))) })] }), _jsxs("div", { className: "p-4 bg-yellow-50 dark:bg-yellow-950 rounded-lg", children: [_jsx("p", { className: "text-sm text-gray-600 dark:text-gray-400", children: "Prestige Points Awarded" }), _jsxs("p", { className: "text-3xl font-bold text-yellow-600 dark:text-yellow-400", children: ["+", prestigeConfig.prestige_points_awarded] })] }), _jsxs(Alert, { variant: "destructive", children: [_jsx(AlertTriangle, { className: "w-4 h-4" }), _jsxs(AlertDescription, { children: [_jsx("strong", { children: "Warning:" }), " Prestiging will reset your character level and traits (keeping ", (prestigeConfig.reset_effects?.keep_percentage || 0) * 100, "%). Some currencies and items will be lost. This action cannot be undone!"] })] }), !confirmOpen ? (_jsx(Button, { className: "w-full", size: "lg", disabled: !canPrestige, onClick: () => setConfirmOpen(true), children: canPrestige ? 'Prestige Now' : 'Requirements Not Met' })) : (_jsxs("div", { className: "space-y-2", children: [_jsx(Button, { className: "w-full", size: "lg", variant: "destructive", onClick: () => {
                                    onPrestige();
                                    setConfirmOpen(false);
                                }, children: "Confirm Prestige - I Understand" }), _jsx(Button, { className: "w-full", size: "lg", variant: "outline", onClick: () => setConfirmOpen(false), children: "Cancel" })] })), _jsxs("div", { children: [_jsx("p", { className: "text-sm text-gray-600 dark:text-gray-400 mb-2", children: "Overall Progress" }), _jsx(Progress, { value: ((meetsLevelReq ? 1 : 0) +
                                    (meetsKarmaReq ? 1 : 0) +
                                    (meetsAchievementReq ? 1 : 0)) / 3 * 100 })] })] })] }));
};
