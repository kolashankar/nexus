import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { useState } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Progress } from '@/components/ui/progress';
import { Badge } from '@/components/ui/badge';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Lock, Check, Star, Zap } from 'lucide-react';
export const SkillTreeVisualizer = ({ traitName, nodes, currentLevel, onNodeUnlock }) => {
    const [selectedBranch, setSelectedBranch] = useState(null);
    const [hoveredNode, setHoveredNode] = useState(null);
    const linearNodes = nodes.filter(n => n.branch === null && n.node_id < 10);
    const branchANodes = nodes.filter(n => n.branch === 'A');
    const branchBNodes = nodes.filter(n => n.branch === 'B');
    const convergenceNodes = nodes.filter(n => n.branch === null && n.node_id > 15);
    const canUnlockNode = (node) => {
        return !node.unlocked && currentLevel >= node.level_required;
    };
    const getNodeIcon = (node) => {
        if (node.unlocked)
            return _jsx(Check, { className: "w-4 h-4" });
        if (canUnlockNode(node))
            return _jsx(Zap, { className: "w-4 h-4" });
        return _jsx(Lock, { className: "w-4 h-4" });
    };
    const getNodeColor = (node) => {
        if (node.unlocked)
            return 'bg-green-500';
        if (canUnlockNode(node))
            return 'bg-yellow-500';
        return 'bg-gray-400';
    };
    return (_jsxs(Card, { className: "w-full", children: [_jsx(CardHeader, { children: _jsxs(CardTitle, { className: "flex items-center justify-between", children: [_jsxs("span", { children: [traitName.replace(/_/g, ' ').toUpperCase(), " Skill Tree"] }), _jsxs(Badge, { variant: "outline", children: ["Level ", currentLevel] })] }) }), _jsx(CardContent, { children: _jsxs("div", { className: "space-y-8", children: [_jsxs("div", { children: [_jsx("h3", { className: "text-sm font-semibold mb-4", children: "Foundation Path" }), _jsx("div", { className: "grid grid-cols-3 gap-4", children: linearNodes.map((node) => (_jsxs("div", { className: "relative", onMouseEnter: () => setHoveredNode(node.node_id), onMouseLeave: () => setHoveredNode(null), children: [_jsx(Button, { variant: "outline", className: `w-full h-20 ${getNodeColor(node)} hover:scale-105 transition-transform`, onClick: () => canUnlockNode(node) && onNodeUnlock(node.node_id), disabled: !canUnlockNode(node) || node.unlocked, children: _jsxs("div", { className: "flex flex-col items-center", children: [getNodeIcon(node), _jsxs("span", { className: "text-xs mt-1", children: ["Node ", node.node_id] }), _jsxs("span", { className: "text-xs text-gray-500", children: ["Lv.", node.level_required] })] }) }), hoveredNode === node.node_id && (_jsxs("div", { className: "absolute z-10 bg-black text-white p-3 rounded shadow-lg top-full mt-2 w-64", children: [_jsxs("p", { className: "text-xs font-semibold mb-1", children: ["Node ", node.node_id] }), _jsxs("p", { className: "text-xs mb-1", children: ["Required Level: ", node.level_required] }), _jsxs("p", { className: "text-xs", children: ["Type: ", node.bonus_type] }), _jsx("p", { className: "text-xs mt-2", children: JSON.stringify(node.bonus_value) })] }))] }, node.node_id))) })] }), _jsxs("div", { children: [_jsx("h3", { className: "text-sm font-semibold mb-4", children: "Specialization Path" }), _jsxs(Tabs, { value: selectedBranch || 'choose', onValueChange: (v) => setSelectedBranch(v), children: [_jsxs(TabsList, { className: "grid w-full grid-cols-2", children: [_jsx(TabsTrigger, { value: "A", children: "Path A" }), _jsx(TabsTrigger, { value: "B", children: "Path B" })] }), _jsx(TabsContent, { value: "A", className: "mt-4", children: _jsx("div", { className: "grid grid-cols-2 gap-4", children: branchANodes.map((node) => (_jsxs("div", { className: "relative", onMouseEnter: () => setHoveredNode(node.node_id), onMouseLeave: () => setHoveredNode(null), children: [_jsx(Button, { variant: "outline", className: `w-full h-20 ${getNodeColor(node)} hover:scale-105 transition-transform`, onClick: () => canUnlockNode(node) && onNodeUnlock(node.node_id), disabled: !canUnlockNode(node) || node.unlocked, children: _jsxs("div", { className: "flex flex-col items-center", children: [getNodeIcon(node), _jsxs("span", { className: "text-xs mt-1", children: ["Node ", node.node_id] }), _jsxs("span", { className: "text-xs text-gray-500", children: ["Lv.", node.level_required] })] }) }), hoveredNode === node.node_id && (_jsxs("div", { className: "absolute z-10 bg-black text-white p-3 rounded shadow-lg top-full mt-2 w-64", children: [_jsxs("p", { className: "text-xs font-semibold mb-1", children: ["Branch A - Node ", node.node_id] }), _jsxs("p", { className: "text-xs mb-1", children: ["Required Level: ", node.level_required] }), _jsxs("p", { className: "text-xs", children: ["Type: ", node.bonus_type] }), _jsx("p", { className: "text-xs mt-2", children: JSON.stringify(node.bonus_value) })] }))] }, `A-${node.node_id}`))) }) }), _jsx(TabsContent, { value: "B", className: "mt-4", children: _jsx("div", { className: "grid grid-cols-2 gap-4", children: branchBNodes.map((node) => (_jsxs("div", { className: "relative", onMouseEnter: () => setHoveredNode(node.node_id), onMouseLeave: () => setHoveredNode(null), children: [_jsx(Button, { variant: "outline", className: `w-full h-20 ${getNodeColor(node)} hover:scale-105 transition-transform`, onClick: () => canUnlockNode(node) && onNodeUnlock(node.node_id), disabled: !canUnlockNode(node) || node.unlocked, children: _jsxs("div", { className: "flex flex-col items-center", children: [getNodeIcon(node), _jsxs("span", { className: "text-xs mt-1", children: ["Node ", node.node_id] }), _jsxs("span", { className: "text-xs text-gray-500", children: ["Lv.", node.level_required] })] }) }), hoveredNode === node.node_id && (_jsxs("div", { className: "absolute z-10 bg-black text-white p-3 rounded shadow-lg top-full mt-2 w-64", children: [_jsxs("p", { className: "text-xs font-semibold mb-1", children: ["Branch B - Node ", node.node_id] }), _jsxs("p", { className: "text-xs mb-1", children: ["Required Level: ", node.level_required] }), _jsxs("p", { className: "text-xs", children: ["Type: ", node.bonus_type] }), _jsx("p", { className: "text-xs mt-2", children: JSON.stringify(node.bonus_value) })] }))] }, `B-${node.node_id}`))) }) })] })] }), _jsxs("div", { children: [_jsx("h3", { className: "text-sm font-semibold mb-4", children: "Mastery Path" }), _jsx("div", { className: "grid grid-cols-3 gap-4", children: convergenceNodes.map((node) => (_jsxs("div", { className: "relative", onMouseEnter: () => setHoveredNode(node.node_id), onMouseLeave: () => setHoveredNode(null), children: [_jsx(Button, { variant: "outline", className: `w-full h-20 ${getNodeColor(node)} hover:scale-105 transition-transform ${node.node_id === 20 ? 'border-4 border-yellow-400' : ''}`, onClick: () => canUnlockNode(node) && onNodeUnlock(node.node_id), disabled: !canUnlockNode(node) || node.unlocked, children: _jsxs("div", { className: "flex flex-col items-center", children: [node.node_id === 20 ? _jsx(Star, { className: "w-5 h-5" }) : getNodeIcon(node), _jsxs("span", { className: "text-xs mt-1", children: ["Node ", node.node_id] }), _jsxs("span", { className: "text-xs text-gray-500", children: ["Lv.", node.level_required] }), node.node_id === 20 && _jsx("span", { className: "text-xs font-bold text-yellow-400", children: "MASTERY" })] }) }), hoveredNode === node.node_id && (_jsxs("div", { className: "absolute z-10 bg-black text-white p-3 rounded shadow-lg top-full mt-2 w-64", children: [_jsxs("p", { className: "text-xs font-semibold mb-1", children: [node.node_id === 20 ? 'MASTERY' : 'Node', " ", node.node_id] }), _jsxs("p", { className: "text-xs mb-1", children: ["Required Level: ", node.level_required] }), _jsxs("p", { className: "text-xs", children: ["Type: ", node.bonus_type] }), _jsx("p", { className: "text-xs mt-2", children: JSON.stringify(node.bonus_value) })] }))] }, node.node_id))) })] }), _jsxs("div", { className: "mt-6", children: [_jsxs("div", { className: "flex justify-between text-sm mb-2", children: [_jsx("span", { children: "Progress" }), _jsxs("span", { children: [nodes.filter(n => n.unlocked).length, " / ", nodes.length, " Nodes"] })] }), _jsx(Progress, { value: (nodes.filter(n => n.unlocked).length / nodes.length) * 100 })] })] }) })] }));
};
